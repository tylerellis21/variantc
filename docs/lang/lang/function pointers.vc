
// just a simple function
def test() void {

}

// some simple math operations
def add(i32 x, i32 y) i32 { return x + y; }
def sub(i32 x, i32 y) i32 { return x - y; }
def mul(i32 x, i32 y) i32 { return x * y; }
def div(i32 x, i32 y) i32 { return x / y; }

// now let's create some function pointers

// invoke them! 
def main(int argc, char** args) i32 {
     
    // let the compiler resolve the args
    func_ptr generic_method = test;
    
    // invoke the generic function pointer which is resolved 
    // during compile time.
    generic_method();
    
    func_ptr add_method = add; 
    func_ptr sub_method = sub; 
    func_ptr mul_method = mul; 
    func_ptr div_method = div; 

    func_ptr* a_func_list = malloc(sizeof(add_method) * 4);
    a_func_list[0] = add_method;
    a_func_list[1] = sub_method;
    a_func_list[2] = div_method;
    a_func_list[3] = mul_method;
    
    i32 x = 100;
    i32 y = 25;

    for (i32 i = 0; i < 4; i++) {
        func_ptr method = a_func_list[i];

        i32 result = method(x, y);

        printf("result: %i\n", result);
    }

    return 0;
}

