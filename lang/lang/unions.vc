// unions

// this is just a template struct
struct<T> Vec3 {
	union {
		struct { T x, T y, T z; }
		struct { T t, T u, T v; }
	}
}

typedef Vec3<r32> vec3f;
typedef Vec3<r64> vec3d;
typedef Vec3<i32> vec3i;

def test1() void {
	vec3f test;
	
	test.x = 0;
	test.y = 0;
	test.z = 0;
	
	// hmm initalizer lists might pose a problem here
	// example: 
	test = {1, 2, 3};
	// would this use the xyz version or the tuv version?
	// i mean they are both the same but in theory the aliases could be different?
}

struct Test2 {
	union {
		i16 x;
		i32 y;
		i64 z;
	}
}

def test2() void {
	i32 size = sizeof(Test2);
	// this should be equal to 8 bytes.
	assert(size == 8);
}